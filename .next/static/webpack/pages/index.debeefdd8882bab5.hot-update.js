"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./context/CircuitContext.js":
/*!***********************************!*\
  !*** ./context/CircuitContext.js ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircuitProvider: () => (/* binding */ CircuitProvider),\n/* harmony export */   useCircuit: () => (/* binding */ useCircuit)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mathjs */ \"(pages-dir-browser)/./node_modules/mathjs/lib/esm/index.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst math = (0,mathjs__WEBPACK_IMPORTED_MODULE_2__.create)(mathjs__WEBPACK_IMPORTED_MODULE_2__.all);\nconst CircuitContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst initialState = {\n    qubits: 3,\n    circuit: Array(3).fill().map(()=>Array(5).fill(null)),\n    history: [],\n    historyIndex: -1,\n    probabilities: null\n};\nconst circuitReducer = (state, action)=>{\n    switch(action.type){\n        case 'ADD_QUBIT':\n            {\n                const newState = {\n                    qubits: state.qubits + 1,\n                    circuit: [\n                        ...state.circuit,\n                        Array(5).fill(null)\n                    ],\n                    history: state.history,\n                    historyIndex: state.historyIndex\n                };\n                return {\n                    ...newState,\n                    history: [\n                        ...state.history.slice(0, state.historyIndex + 1),\n                        {\n                            qubits: state.qubits,\n                            circuit: state.circuit\n                        }\n                    ],\n                    historyIndex: state.historyIndex + 1,\n                    probabilities: simulateCircuit(newState.circuit, newState.qubits)\n                };\n            }\n        case 'REMOVE_QUBIT':\n            {\n                if (state.qubits <= 1) return state;\n                const newState = {\n                    qubits: state.qubits - 1,\n                    circuit: state.circuit.slice(0, -1),\n                    history: state.history,\n                    historyIndex: state.historyIndex\n                };\n                return {\n                    ...newState,\n                    history: [\n                        ...state.history.slice(0, state.historyIndex + 1),\n                        {\n                            qubits: state.qubits,\n                            circuit: state.circuit\n                        }\n                    ],\n                    historyIndex: state.historyIndex + 1,\n                    probabilities: simulateCircuit(newState.circuit, newState.qubits)\n                };\n            }\n        case 'ADD_GATE':\n            {\n                const { qubit, time, type, targetQubit } = action.payload;\n                console.log('Adding gate:', {\n                    qubit,\n                    time,\n                    type,\n                    targetQubit\n                });\n                const newCircuit = state.circuit.map((row, i)=>i === qubit ? row.map((cell, j)=>j === time ? {\n                            type,\n                            targetQubit\n                        } : cell) : row);\n                if (type === 'CNOT' && targetQubit !== undefined) {\n                    newCircuit[targetQubit][time] = {\n                        type: 'CNOT_TARGET'\n                    };\n                }\n                const newState = {\n                    qubits: state.qubits,\n                    circuit: newCircuit,\n                    history: state.history,\n                    historyIndex: state.historyIndex\n                };\n                return {\n                    ...newState,\n                    history: [\n                        ...state.history.slice(0, state.historyIndex + 1),\n                        {\n                            qubits: state.qubits,\n                            circuit: state.circuit\n                        }\n                    ],\n                    historyIndex: state.historyIndex + 1,\n                    probabilities: simulateCircuit(newCircuit, state.qubits)\n                };\n            }\n        case 'REMOVE_GATE':\n            {\n                const { qubit, time } = action.payload;\n                const newCircuit = state.circuit.map((row, i)=>i === qubit ? row.map((cell, j)=>j === time ? null : cell) : row);\n                const newState = {\n                    qubits: state.qubits,\n                    circuit: newCircuit,\n                    history: state.history,\n                    historyIndex: state.historyIndex\n                };\n                return {\n                    ...newState,\n                    history: [\n                        ...state.history.slice(0, state.historyIndex + 1),\n                        {\n                            qubits: state.qubits,\n                            circuit: state.circuit\n                        }\n                    ],\n                    historyIndex: state.historyIndex + 1,\n                    probabilities: simulateCircuit(newCircuit, state.qubits)\n                };\n            }\n        case 'UPDATE_GATE':\n            {\n                const { removes, adds } = action.payload;\n                let newCircuit = state.circuit.map((row)=>[\n                        ...row\n                    ]);\n                // Apply all removals\n                removes.forEach((param)=>{\n                    let { qubit, time } = param;\n                    newCircuit = newCircuit.map((row, i)=>i === qubit ? row.map((cell, j)=>j === time ? null : cell) : row);\n                });\n                // Apply all additions\n                adds.forEach((param)=>{\n                    let { qubit, time, type, targetQubit } = param;\n                    newCircuit = newCircuit.map((row, i)=>i === qubit ? row.map((cell, j)=>j === time ? {\n                                type,\n                                targetQubit\n                            } : cell) : row);\n                    if (type === 'CNOT' && targetQubit !== undefined) {\n                        newCircuit[targetQubit][time] = {\n                            type: 'CNOT_TARGET'\n                        };\n                    }\n                });\n                const newState = {\n                    qubits: state.qubits,\n                    circuit: newCircuit,\n                    history: state.history,\n                    historyIndex: state.historyIndex\n                };\n                return {\n                    ...newState,\n                    history: [\n                        ...state.history.slice(0, state.historyIndex + 1),\n                        {\n                            qubits: state.qubits,\n                            circuit: state.circuit\n                        }\n                    ],\n                    historyIndex: state.historyIndex + 1,\n                    probabilities: simulateCircuit(newCircuit, state.qubits)\n                };\n            }\n        case 'UNDO':\n            {\n                if (state.historyIndex <= -1) return state;\n                const prevState = state.history[state.historyIndex];\n                return {\n                    ...state,\n                    qubits: prevState.qubits,\n                    circuit: prevState.circuit,\n                    historyIndex: state.historyIndex - 1,\n                    probabilities: simulateCircuit(prevState.circuit, prevState.qubits)\n                };\n            }\n        case 'REDO':\n            {\n                if (state.historyIndex >= state.history.length - 1) return state;\n                const nextState = state.history[state.historyIndex + 1];\n                return {\n                    ...state,\n                    qubits: nextState.qubits,\n                    circuit: nextState.circuit,\n                    historyIndex: state.historyIndex + 1,\n                    probabilities: simulateCircuit(nextState.circuit, nextState.qubits)\n                };\n            }\n        default:\n            return state;\n    }\n};\nconst simulateCircuit = (circuit, qubits)=>{\n    const dim = 1 << qubits;\n    let state = math.zeros(dim, 1);\n    state.subset(math.index(0, 0), 1);\n    const H = math.matrix([\n        [\n            1 / Math.sqrt(2),\n            1 / Math.sqrt(2)\n        ],\n        [\n            1 / Math.sqrt(2),\n            -1 / Math.sqrt(2)\n        ]\n    ]);\n    const CNOT = math.matrix([\n        [\n            1,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            1,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            1\n        ],\n        [\n            0,\n            0,\n            1,\n            0\n        ]\n    ]);\n    for(let time = 0; time < circuit[0].length; time++){\n        for(let qubit = 0; qubit < qubits; qubit++){\n            const gate = circuit[qubit][time];\n            if (!gate) continue;\n            if (gate.type === 'H') {\n                const op = math.kron(math.identity(1 << qubit), math.kron(H, math.identity(1 << qubits - qubit - 1)));\n                state = math.multiply(op, state);\n            } else if (gate.type === 'CNOT') {\n                const target = gate.targetQubit;\n                if (target >= qubits) continue;\n                if (target === qubit + 1) {\n                    const op = math.kron(math.identity(1 << qubit), math.kron(CNOT, math.identity(1 << qubits - qubit - 2)));\n                    state = math.multiply(op, state);\n                }\n            }\n        }\n    }\n    const stateArray = state.toArray();\n    const probs = {};\n    for(let i = 0; i < dim; i++){\n        const basis = i.toString(2).padStart(qubits, '0');\n        probs[basis] = Math.pow(math.abs(stateArray[i][0]), 2);\n    }\n    return probs;\n};\nconst CircuitProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(circuitReducer, {\n        ...initialState,\n        probabilities: simulateCircuit(initialState.circuit, initialState.qubits)\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CircuitContext.Provider, {\n        value: {\n            state,\n            dispatch\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\elang\\\\OneDrive\\\\Desktop\\\\quantum_computing\\\\context\\\\CircuitContext.js\",\n        lineNumber: 214,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CircuitProvider, \"HQ7J8g7Wi96z+GASQZbvQjzWJ5E=\");\n_c = CircuitProvider;\nconst useCircuit = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(CircuitContext);\n};\n_s1(useCircuit, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CircuitProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./context/CircuitContext.js\n"));

/***/ })

});